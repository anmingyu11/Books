Bash (Bourne Again Shell)
$表示普通用户#表示超级用户
shebang符号
.bashrc .bash_history
shell命令以;分隔
echo -e '包含转义序列的字符串'
Bash中，每一个变量的值都是字符串。
env命令
/proc/$PID/environ
tr命令
var=value 和val = value
环境变量
export命令
PATH环境变量
获得字符串的长度 : 
	$(#var)
shell版本 : 
	echo $SHELL  u
	echo $0
检查是否为超级用户:
	if [ $UID -ne 0 ]
let命,bc命令
文件描述符 预留描述符0 1 2
>和>>的区别。
程序的退出状态 $?
tee命令
cat <<EOF>log
文件打开模式
<操作符用于从文件中读取至stdin >操作符用于截断模式的文件写入 >>操作符用于追加模式的文件写入 文件描述符可以用以上三种模式中的任意一种来创建。
alias命令 alias转义
tput stty两款终端处理工具
date:
	日期转换为纪元时（时间戳）
	检查一组命令所花费的时间
在脚本中生成延时
tput命令
跟踪调试shell脚本:
	sh -x script
	bash -x script.sh
	set -x set +x set -v set +v
	_DEBUG=on
	shebang 的妙用  #!/bin/bash -xv
函数参数:
	1 : fname(){
		echo $1, $2
		echo "$@"//所有参数
		echo "$*"讲所有参数当做单个字符串
		return 0
	}
Fork炸弹
导出函数：
	export导出函数，作用域可以扩展到子进程中
	export -f fname
读取命令返回值:
	echo $?
	读取命令序列的输出: cmd_out=$(COMMANDS)
	反引用读取命令输出 cmd_out=`COMMANDS`
子shell生成独立进程:
	pwd
	(cd/bin;ls);
	pwd;
read命令:
	read -n var 从输入中读取n个字符病存入变量var
	read -s var 不回县的方式读取密码
	read -p "enter : " var 提示信息
	read -t timeout var timeout内读取输入
	read -d delim_charvar 定界符结束输入
CSV IFS:
	是什么---???
```
	data="name,sex,rool"
	oldIFS=$IFS
	IFS=,
	for item in $data;
		do
		echo ITEM: $item
		done
	IFS=$oldIFS
```
for循环:
	for var in list;
	do
	commands;
	done
	
	echo{1..50}能够生成一个1到50的数字列表
	for循环也可以采用C语言中for循环的格式:
	for((i=0;i<10;++i)){
		commands;
	}
while循环:
	while condition
	do
	commands;
	done
until循环:
	x=0;
	until [ $x -eq 9 ]
	do let x++; echo $x;
	done
if条件:
	if condition;
	then
		commands;
	elif condition;
	then
		commands;
	else
		commands;
	fi
if 复合判断:
	[ condition ] && action;
if 算数比较
	[ $v -eq 0 ] 
	[ $v -ne 0 ]
	[ $v -gt 0]
	[ $v -lt 0]
	[ $v -ge 0]
	[ $v -le 0]
	[ $v -ge 0 -a $v -gt 0] #and
	[ $v -ge 0 -o $v -gt 0] #or
	文件系统相关条件测试，测试不同文件系统相关属性---???
字符串比较
	[[ $str1 = $str2]]
	[[ $str1 != $str2]]
	[[ $str1 < $str2]]
	[[ $str1 > $str2]]
	[[ -z $str1 ]] 空字符串
	[[ -n $str1 ]] 非空字符串
